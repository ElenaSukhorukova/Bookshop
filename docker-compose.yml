services:

  redis:
    container_name: redis
    image: redis:latest
    command: redis-server
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    environment:
      REDIS_HOST: ${REDIS_HOST}

  postgresql:
    image: 'postgres:latest'
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    healthcheck:
        test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
        interval: 10s
        timeout: 5s
        retries: 5

  minio:
    container_name: minio
    image: bitnami/minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - 'minio:/bitnami/minio/data'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS}

  kafka:
    container_name: kafka
    image: apache/kafka-native
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    container_name: kafka-ui
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    depends_on:
      - kafka

  business:
    image: business:latest
    build: ./business
    ports:
      - '5000:5000'
    volumes:
      - .:/business
    environment:
      RAILS_ENV: ${RAILS_ENV}
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
    depends_on:
      - postgresql
      - redis

  buisness_sidekiq:
    image: buisness_sidekiq:latest
    build: ./business
    command: bundle exec sidekiq
    volumes:
      - .:/business
    environment:
      RAILS_ENV: ${RAILS_ENV}
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
    depends_on:
      redis:
        condition: service_healthy

  core-front:
    image: core-front:latest
    build: ./core-front
    ports:
      - "3000:3000"
    volumes:
     - .:/core-front
     - node_modules:/app/node_modules
    environment:
      NODE_ENV: ${NODE_ENV}
      CORE_URL: ${CORE_URL}
    stdin_open: true
    tty: true
    command: npm start

  core:
    image: core
    build: ./core
    ports:
      - '4000:4000'
    volumes:
      - .:/core
    environment:
      RAILS_ENV: ${RAILS_ENV}
      DB_USER: ${DB_USER}
    depends_on:
      - postgresql
      - redis

volumes:
  postgres_data:
  redis_data:
  node_modules:
  minio:
    driver: local